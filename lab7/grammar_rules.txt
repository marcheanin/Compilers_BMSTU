PROGRAM -> FUNCTION_DECL* | .

FUNC_DECL -> FUNC_DECL1 | FUNC_DECL2
FUNC_DECL1 -> (TYPE | VOID) IDENT '<-' PARAMETERS '=' OPERATORS .
FUNC_DECL1 -> (TYPE | VOID) IDENT '=' OPERATORS .


PARAMETERS -> 	PARAMETERS PARAMETER | .
PARAMETER  -> 	TYPE IDENT .

OPERATORS -> 	OPERARTORS ';' OPERATOR | .
OPERATOR  -> 	DECL_OPERATOR | 
		ASSIGN_OPERATOR | 
		FUNC_CALL_OPERATOR | 
		CHOOSE_OPERATOR | 
		WHILE_LOOP | 
		FOR_LOOP | 
		POST_LOOP | 
		END_FUNC_OPERATOR .

DECL_OPERATOR -> TYPE VAR_DECL
VAR_DECL -> IDENT | ASSIGN_OPERATOR

ASSIGN_OPERATOR -> IDENT ':=' EXPRESSION

FUNC_CALL_OPERATOR -> IDENT '<-' EXPRESSIONS

CHOOSE_OPERATOR -> CHOOSE_OPERATOR1 | CHOOSE_OPERATOR2
CHOOSE_OPERATOR1 -> EXPRESSION 'then' OPERATORS 'else' OPERATORS .
CHOOSE_OPERATOR2 -> EXPRESSION 'then' OPERATORS .

END_FUNC_OPERATOR -> 'return' EXPRESSION?

PRED_LOOP -> EXPRESSION 'loop' OPERATORS .
POST_LOOP -> 'loop' OPERATORS 'while' EXPRESSION .

EXPRESSIONS -> EXPRESSIONS EXPRESSION | .
EXPRESSION -> 	EXPRESSION EXPRESSION |
		TYPE EXPRESSION	|
		'-' EXPRESSION |
		'!' EXPRESSION |
		EXPRESSION OP_SYMBOL EXPRESSION |
		FUNC_CALL_OPERATOR |
		IDENT | 
			

OP_SYMBOL -> '-' | '!' | '^' | '*' | '/' | '%' | '+' | '-' | '==' | '!=' | '<' | '>' | '<=' | '>=' | '&' | '|' | '@'

TYPE -> 
IDENT -> {[a-zA-Z0-9_\p{L}\s]+}
INTEGER_CONST -> ^(0|[1-9][0-9][A-Z])$([2-9]|[1-2][0-9]|3[0-6])$
